from airflow.models.connection import Connection
from airflow.sensors.base import BaseSensorOperator
import psycopg2 as pg
import pandas.io.sql as psql


# Определяем новый класс CheckTableSensor, который наследует от базового класса BaseSensorOperator
class CheckTableSensor(BaseSensorOperator):
    # Определяем поля контекста, которые будут использоваться в методе poke
    poke_context_fields = ['conn', 'table_name']

    # Конструктор класса, который инициализирует соединение и имя таблицы
    def __init__(self, conn: Connection, table_name: str, *args, **kwargs):
        self.conn = conn  # Сохраняем объект подключения в атрибуте conn
        self.table_name = table_name  # Сохраняем имя таблицы в атрибуте table_name
        # Вызываем конструктор родительского класса для инициализации
        super(CheckTableSensor, self).__init__(*args, **kwargs)

    # Метод, который проверяет состояние задачи
    def poke(self, context):
        # Устанавливаем соединение с базой данных PostgreSQL с использованием параметров подключения
        connection = pg.connect(
            f"host={self.conn.host} dbname={self.conn.schema} user={self.conn.login} password={self.conn.password}")

        # Выполняем SQL-запрос для получения первой строки из указанной таблицы
        df_currency = psql.read_sql(f'SELECT * FROM {self.table_name} LIMIT 1', connection)

        # Проверяем, есть ли данные в полученном датафрейме
        if len(df_currency) > 0:
            print(True)  # Если данные есть, выводим True
            return True  # Возвращаем True для успешного завершения
        else:
            print(False)  # Если данных нет, выводим False
            return False  # Возвращаем False для неуспешного завершения
